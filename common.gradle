sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

group = project.maven_group as Object

configurations {
    includeTransitive {
        transitive = true
    }
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    mavenLocal()
    maven {
        url = "https://mvnrepository.com/"
    }
    mavenCentral()
}

dependencies {
    // Modget Manifest API
    shadow implementation("com.github.ReviversMC.modget-manifest-api:compat:${project.modget_manifest_api_version}")
    shadow implementation("com.github.ReviversMC.modget-manifest-api:spec3:${project.modget_manifest_api_version}")
    shadow implementation("com.github.ReviversMC.modget-manifest-api:spec4:${project.modget_manifest_api_version}")
    // shadow implementation(files("libs/modget-manifest-api-compat-0.1.0.jar"))
    // shadow implementation(files("libs/modget-manifest-api-spec3-0.2.0.jar"))
    // shadow implementation(files("libs/modget-manifest-api-spec4-0.1.0.jar"))
    shadow implementation("com.fasterxml.jackson.core:jackson-core:${project.jackson_version}")
    shadow implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${project.jackson_version}")
    shadow implementation("com.fasterxml.jackson.core:jackson-databind:${project.jackson_version}")
    shadow implementation("com.fasterxml.jackson.core:jackson-annotations:${project.jackson_version}")

    // Modget Library
    shadow implementation("com.github.ReviversMC:modget-lib:${project.modget_lib_version}")
    // include implementation(files("../libs/modget-lib-${project.modget_lib_version}.jar"))

    shadow implementation("org.apache.commons:commons-text:${project.commons_text_version}")
    shadow implementation("com.diogonunes:JColor:5.2.0")
    shadow implementation("com.google.dagger:dagger:2.40.5")
    shadow implementation("com.squareup.moshi:moshi:1.13.0")
    shadow implementation("com.squareup.okhttp3:okhttp:4.9.3")
    shadow implementation("com.squareup.okhttp3:okhttp-urlconnection:4.9.3")
    annotationProcessor("com.google.dagger:dagger-compiler:2.40.5")

	// JUnit Jupiter for testing
	testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'

    compileOnly "com.github.spotbugs:spotbugs:${project.spotbugs_version}"
}


tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
}

tasks.withType(JavaCompile).configureEach {
    def targetVersion = 8
	if (JavaVersion.current().isJava9Compatible()) {
		 it.options.release = targetVersion
	}
}

shadowJar {
    configurations = [project.configurations.shadow]
    archiveClassifier.set("")
}

test {
    useJUnitPlatform()
}



project.afterEvaluate {
    configurations.includeTransitive.incoming.resolutionResult.allComponents {
        if (it.id instanceof ModuleComponentIdentifier) {
            def that = it
            dependencies {
                include group: that.id.getGroup(), name: that.id.getModule(), version: that.id.getVersion()
            }
        }
    }
}


jar {
    from "LICENSE"
}
